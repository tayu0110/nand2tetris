// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
// 一部参考(Screen.init, Screen.drawPixelなど) : havivhaさん(https://github.com/havivha/Nand2Tetris)
class Screen {
    static boolean color;
    static Array bitVal, baseAddr;

    /** Initializes the Screen. */
    function void init() {
        var int i, j;

        let color = true;
        let baseAddr = 16384;
        let bitVal = Array.new(16);
        let i = 0;
        let j = 1;

        while(i < 16) {
            let bitVal[i] = j;
            let j = j + j;
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;

        do Screen.setColor(false);

        while(i < 8192) {
            let baseAddr[i] = color;
            let i = i + 1;
        }

        do Screen.setColor(true);

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, bit, k;

        let addr = (y * 32) + (x / 16);
        let bit = x - ((x / 16) * 16);

        if(addr < 0 | addr > 8192) {
            do Sys.error(7);
        }

        if(color) {
            let baseAddr[addr] = baseAddr[addr] | bitVal[bit];
        } else {
            let baseAddr[addr] = baseAddr[addr] & (~bitVal[bit]);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b;

        if(x1 < 0 | x2 < 0 | x1 > 511 | x2 > 511) {
            do Sys.error(8);
        }
        if(y1 < 0 | y2 < 0 | y1 > 255 | y2 > 255) {
            do Sys.error(8);
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;

        if(dx = 0) {
            while(b < Math.abs(dy)) {
                if(dy > 0) {
                    do Screen.drawPixel(x1, y1 + b);
                } else {
                    do Screen.drawPixel(x1, y1 - b);
                }
                let b = b + 1;
            }
            return;
        } 
        
        if(dy = 0) {
            while(a < Math.abs(dx)) {
                if(dx > 0) {
                    do Screen.drawPixel(x1 + a, y1);
                } else {
                    do Screen.drawPixel(x1 - a, y1);
                }
                let a = a + 1;
            }
            return;
        }
        
        while(~(a > Math.abs(dx)) & ~(b > Math.abs(dy))) {
            if(dx < 0 & (dy < 0)) {
                do Screen.drawPixel(x1 - a, y1 - b);
            } else {
                if(dx < 0 & (dy > 0)) {
                    do Screen.drawPixel(x1 - a, y1 + b);
                } else {
                    if(dx > 0 & (dy < 0)) {
                        do Screen.drawPixel(x1 + a, y1 - b);
                    } else {
                        do Screen.drawPixel(x1 + a, y1 + b);
                    }
                }
            }
            if(a * Math.abs(dy) < (b * Math.abs(dx))) {
                let a = a + 1;
            } else {
                let b = b + 1;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if(x1 < 0 | x2 < 0 | x1 > 511 | x2 > 511) {
            do Sys.error(9);
        }
        if(y1 < 0 | y2 < 0 | y1 > 255 | y2 > 255) {
            do Sys.error(9);
        }

        while(~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dif;

        if(x < 0 | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(12);
        }
        if(r < 0) {
            do Sys.error(13);
        }

        let dy = -r;

        while(dy < (r + 1)) {
            let dif = Math.sqrt(r * r - (dy * dy));
            do Screen.drawLine(x - dif, y + dy, x + dif, y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
