// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */

//  一部参考(String.setIntなど) : havivhaさん(https://github.com/havivha/Nand2Tetris)
class String {
    field Array str;
    field int len;
    field int maxLen;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 0) {
            do Sys.error(14);
        }

        let str = Array.new(maxLength);
        let len = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if((j < 0) | (j > maxLen)) {
            do Sys.error(15);
        }

        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < 0 | (j > maxLen)) {
            do Sys.error(16);
        }

        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(len = maxLen) {
            do Sys.error(17);
        }

        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(len = 0) {
            do Sys.error(18);
        }
        let str[len-1] = 0;
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, res, k;
        var boolean isNeg;
        let i = 0;
        let isNeg = false;

        if((len > 0) & (str[0] = 45)) {
            let isNeg = true;
            let i = 1;
        }

        let res = 0;
        while(i < len) {
            let k = str[i] - 48;
            if(~(k < 0) & (k < 10)) {
                let res = res * 10 + k;
            } else {
                let i = len;
            }
            let i = i + 1;
        }

        if(isNeg) {
            let res = -res;
        }

        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;

        if(val < 0) {
            let val = -val;
            do appendChar(45);
        }

        do do_set_int(val);

        return;
    }

    method void do_set_int(int val) {
        var int q, mod;
        var char c;

        let q = val / 10;
        let mod = val - (q * 10);
        let c = mod + 48;

        if(val < 10) {
            do appendChar(c);
        } else {
            do do_set_int(q);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
