// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 

//  参考(というかほぼコピペ)：havivhaさん(https://github.com/havivha/Nand2Tetris)
class Memory {
    static Array memory;
    static Array freeList;
    static Array NO_BLOCK;

    static int FL_LENGTH;
    static int FL_NEXT;

    static int ALLOC_SIZE;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let NO_BLOCK = 16384;
        let FL_LENGTH = 0;
        let FL_NEXT = 1;
        let ALLOC_SIZE = -1;
        /* 14336 = 16383 - 2048 + 1 */
        let freeList[FL_LENGTH] = 14336;
        let freeList[FL_NEXT] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array prev_block, found_block;
        var int prev_size;

        if(size < 0) {
            do Sys.error(5);
        }

        let prev_block = Memory.first_fit(size);
        if(prev_block = NO_BLOCK) {
            do Sys.error(6);
        } else {
            if(prev_block = null) {
                let found_block = freeList;
                let freeList = Memory.do_alloc(found_block, size);
            } else {
                let found_block = prev_block[FL_NEXT];
                let prev_block[FL_NEXT] = Memory.do_alloc(found_block, size);
            }
        }
        return found_block + 1;
    }

    function Array first_fit(int size) {
        var Array first_block, prev_block, cur_block;
        var int found_size, cur_size;

        let first_block = NO_BLOCK;
        let found_size = 16384 - 2048;
        let cur_block = freeList;
        let prev_block = null;

        while(~(cur_block = null)) {
            let cur_size = cur_block[FL_LENGTH] - 1;
            if(~(cur_size < size)) {
                let first_block = prev_block;
            }
            let prev_block = cur_block;
            let cur_block = cur_block[FL_NEXT];
        }

        return first_block;
    }

    function Array do_alloc(Array found_block, int size) {
        var Array next_block;
        var int block_size;

        if(found_block[FL_LENGTH] > (size + 1 + 2)) {
            let next_block = found_block + size + 1;
            let next_block[FL_NEXT] = found_block[FL_NEXT];
            let next_block[FL_LENGTH] = found_block[FL_LENGTH] - (next_block - found_block);
            let found_block = found_block + 1;
            let found_block[ALLOC_SIZE] = size + 1;
        } else {
            let next_block = found_block[FL_NEXT];
            let block_size = found_block[FL_LENGTH];
            let found_block = found_block + 1;
            let found_block[ALLOC_SIZE] = block_size;
        }
        return next_block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int alloc_size;
        var Array prev_block, next_block;

        let alloc_size = o[ALLOC_SIZE];
        let o = o - 1;
        let prev_block = Memory.find_prev_free(o);

        if(prev_block = null) {
            let o[FL_LENGTH] = alloc_size;
            let o[FL_NEXT] = freeList;
            let freeList = o;
            let prev_block = o;
        } else {
            if((prev_block + prev_block[FL_LENGTH]) = o) {
                let prev_block[FL_LENGTH] = prev_block[FL_LENGTH] + alloc_size;
            } else {
                let o[FL_LENGTH] = alloc_size;
                let o[FL_NEXT] = prev_block[FL_NEXT];
                let prev_block[FL_NEXT] = o;
                let prev_block = o;
            }
        }

        if((prev_block + prev_block[FL_LENGTH]) = prev_block[FL_NEXT]) {
            let next_block = prev_block[FL_NEXT];
            let prev_block[FL_LENGTH] = prev_block[FL_LENGTH] + next_block[FL_LENGTH];
            let prev_block[FL_NEXT] = next_block[FL_NEXT];
        }

        return;
    }

    function Array find_prev_free(Array object) {
        var Array block;

        if(freeList > object) {
            return null;
        }

        let block = freeList;
        while(~(block[FL_NEXT] = null) & (block[FL_NEXT] < object)) {
            let block = block[FL_NEXT];
        }

        return block;
    }
}
