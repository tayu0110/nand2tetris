// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
//  一部参考(Math.bitなど) : havivhaさん(https://github.com/havivha/Nand2Tetris)
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        var int i, k;
        let i = 0;
        let k = 1;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;
        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while(j < 16) {
            if(Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var boolean neg_x, neg_y;
        let q = 0;
        let neg_x = (x < 0);
        let neg_y = (y < 0);
        let x = Math.abs(x);
        let y = Math.abs(y);

        while(~(x < y)) {
            let x = x - y;
            let q = q + 1;
        }
        if(~(neg_x = neg_y)) {
            let q = -q;
        }
        return q;
        // var int q;
        // var int res;
        // var boolean neg_x, neg_y;

        // let neg_x = (x < 0);
        // let neg_y = (y < 0);
        // let x = Math.abs(x);
        // let y = Math.abs(y);

        // if(y > x) {
        //     return 0;
        // }
        // let q = Math.divide(x, y + y);
        // if(x - Math.multiply(q + q, y) < y) {
        //     let res = q + q;
        // } else {
        //     let res = q + q + 1;
        // }

        // if(neg_x = neg_y) {
        //     return res;
        // } else {
        //     return -res;
        // }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, res, k, l;

        let i = 7;
        let res = 0;
        while(~(i < 0)) {
            let k = res + twoToThe[i];
            let l = k * k;
            if(~(l > x) & (l > 0)) {
                let res = k;
            }
            let i = i - 1;
        }

        return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int res;
        if(a > b) {
            let res = a;
        } else {
            let res = b;
        }
        return res;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int res;
        if(a < b) {
            let res = a;
        } else {
            let res = b;
        }
        return res;
    }

    function boolean bit(int x, int j) {
        return ~((x & twoToThe[j]) = 0);
    }
}
